#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(INT3)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(INT1)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27  // Left-hand keys.
#define KEYS_R 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33  // Right-hand keys.
#define KEYS_T 34 35 36 37 38 39 40 41 42                     // Thumb keys.

#define HM_TAPPING_TERM 200
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    //automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;

    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&caps_word { 
    continue-list = <BACKSPACE DELETE MINUS LSHIFT INT1>; 
};

/ {
    combos {
        compatible = "zmk,combos";

//        tab {
//            bindings = <&kp TAB>;
//            key-positions = <11 12>;
//        };

//        shift_tab {
//            bindings = <&kp LS(TAB)>;
//            key-positions = <12 13>;
//        };

//        muhennkann {
//            bindings = <&to_layer_0 INT_MUHENKAN>;
//            key-positions = <11 10>;
//        };

//        double_quotation {
//            bindings = <&kp DOUBLE_QUOTES>;
//            key-positions = <20 21>;
//        };

//        eq {
//            bindings = <&kp EQUAL>;
//            key-positions = <24 25>;
//        };
        delete {
            bindings = <&kp DELETE>;
            key-positions = <31 32>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <23 24>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        lang1 {    
            bindings = <&kp LANGUAGE_1>;
            key-positions = <30 31>;
        };
    
        lang2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <24 25>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <22 33>;
        };    
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        //コロンセミコロン
        jis_semi: jis_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "jis_SEMI";
            #binding-cells = <0>;
            bindings = <&kp SEMI>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            // keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_semi: mod_tap_jis_semi {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_JIS_SEMI";
            flavor = "balanced";
            #binding-cells = <2>;
            bindings = <&kp>, <&jis_semi>;
            tapping-term-ms = <HM_TAPPING_TERM>;
            //quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            //quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            //quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W             &kp E          &kp R          &kp T                                                          &kp Y        &kp U          &lt 5 I         &kp O              &kp P
&hm_l LGUI A      &hm_l LEFT_ALT S  &hm_l LSHFT D  &hm_l LCTRL F  &kp G        &to 4                              &none          &kp H        &hm_r RCTRL J  &hm_r RSHIFT K  &hm_r RIGHT_ALT L  &mt_semi RMETA 0
&kp Z             &kp X             &kp C          &kp V          &kp B        &none                              &none          &kp N        &kp M          &kp COMMA       &kp DOT            &kp SLASH
&none             &none             &none          &mo 5          &mo 2        &kp SPACE                          &kp ENTER      &mo 1                                                          &none
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                           &kp NUMBER_6    &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &trans          &trans   &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT     &kp F11
&kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &trans          &trans   &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END       &kp F12
&trans        &trans        &trans        &trans        &trans        &trans          &trans   &trans                                                     &trans
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp JP_AT     &kp HASH         &kp DOLLAR     &kp PERCENT                                         &kp JP_CARET     &kp JP_AMPERSAND  &kp JP_ASTERISK &kp JP_LPAREN    &kp JP_RPAREN
&trans           &trans        &kp JP_YEN       &kp JP_QUOTE   &trans       &trans                       &trans    &kp JP_BACKQUOTE &kp MINUS         &kp JP_EQUAL    &kp JP_LBRACKET  &kp JP_RBRACKET
&trans           &trans        &kp JP_PIPE      &kp JP_DQUOTE  &trans       &trans                       &trans    &kp JP_TILDE     &kp JP_UNDERSCORE &kp JP_PLUS     &kp JP_LBRACE    &kp JP_RBRACE
&trans           &trans        &trans           &trans         &trans       &trans                       &trans    &trans                                                              &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans   &trans        &trans  &trans  &mkp LCLK &mkp RCLK &trans    &trans
&trans  &trans  &trans  &trans  &trans   &trans        &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans   &trans        &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &kp K_APP     &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
